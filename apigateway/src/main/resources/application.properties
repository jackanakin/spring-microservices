# we can use both AUTOMATIC and MANUAL strategies
server.port=8082
spring.application.name=apigateway
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka

# allows to automatically discover routes based on services registered with a service registry like Eureka
# automatically map routes
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

##########
### OR ###
##########

## Manually configuring routes
## Specifies the application uri to acquire the addresses from Eureka Server for load balancing purposes
## Could statically hardcode the address too, but load balancing wouldn't work
#spring.cloud.gateway.routes[0].id=users-status-check
## GET {{apiGateway}}/users/status/check
#spring.cloud.gateway.routes[0].uri = lb://users-api
#spring.cloud.gateway.routes[0].predicates[0]=Path=/my-custom/users/check
#spring.cloud.gateway.routes[0].predicates[1]=Method=GET, POST, PUT, DELETE
## Built-in filter
#spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
#spring.cloud.gateway.routes[0].filters[1]=RewritePath=/my-custom/users/check, /users/status/check

#https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories

spring.cloud.gateway.routes[0].id=users-status-check
spring.cloud.gateway.routes[0].uri = lb://users-api
spring.cloud.gateway.routes[0].predicates[0]=Path=/users-api/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-api/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter

spring.cloud.gateway.routes[1].id = users-api
spring.cloud.gateway.routes[1].uri = lb://users-api
spring.cloud.gateway.routes[1].predicates[0]=Path=/users-api/users
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/users-api/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[2].id = users-api-login
spring.cloud.gateway.routes[2].uri = lb://users-api
spring.cloud.gateway.routes[2].predicates[0]=Path=/users-api/users/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/users-api/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[3].id = users-api-get-update-delete
spring.cloud.gateway.routes[3].uri = lb://users-api
spring.cloud.gateway.routes[3].predicates[0]=Path=/users-api/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=AuthorizationHeaderFilter
spring.cloud.gateway.routes[3].filters[2]=RewritePath=/users-api/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[4].id = users-api-h2-console
spring.cloud.gateway.routes[4].uri = lb://users-api
spring.cloud.gateway.routes[4].predicates[0]=Path=/users-api/h2-console
spring.cloud.gateway.routes[4].predicates[1]=Method=GET
spring.cloud.gateway.routes[4].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[4].filters[1]=RewritePath=/users-api/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[5].id = users-api-actuator
spring.cloud.gateway.routes[5].uri = lb://users-api
spring.cloud.gateway.routes[5].predicates[0]=Path=/users-api/actuator/**
spring.cloud.gateway.routes[5].predicates[1]=Method=GET
spring.cloud.gateway.routes[5].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[5].filters[1]=RewritePath=/users-api/(?<segment>.*), /$\{segment}